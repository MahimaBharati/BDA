9. Write a map reduce program to find the total product wise
sales of all the retail stores.
DRIVER CLASS:
package product;
import org.apache.hadoop.conf.Configuration;
import java.io.IOException;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;
public class RetailDataAnalysis {
public static void main(String[] args) throws Exception{
Configuration conf=new Configuration();
String[] otherArgs=new GenericOptionsParser(conf,args).getRemainingArgs();
if(otherArgs.length!=2) {
System.err.println("Usage:Number sum<in><out>");
System.exit(2);
}
Job job=Job.getInstance(conf,"Retail Data Product Store analysis");
job.setJarByClass(RetailDataAnalysis.class);
job.setMapperClass(RetailDataAnalysisMapper.class);
job.setReducerClass(RetailDataAnalysisReducer.class);
job.setMapOutputKeyClass(Text.class);
job.setMapOutputValueClass(FloatWritable.class);
job.setOutputKeyClass(Text.class);
job.setOutputValueClass(FloatWritable.class);
FileInputFormat.addInputPath(job,new Path(otherArgs[0]));
FileOutputFormat.setOutputPath(job,new Path(otherArgs[1]));
System.exit(job.waitForCompletion(true)?0:1);
}
}

MAPPER CLASS:
package product;
import java.io.IOException;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
public class RetailDataAnalysisMapper extends Mapper<LongWritable,Text,Text,FloatWritable>{
private FloatWritable percentVal=new FloatWritable();
private Text moKey=new Text();
public void map(LongWritable key,Text value,Context context)throws IOException,
InterruptedException{
try {
String valueTokens[]=value.toString().split("\t");
float saleValue;
String date=valueTokens[0];
String productCat=valueTokens[3];
if(valueTokens.length>0 && valueTokens.length==6)
{
}
}catch(Exception e)
{
moKey.set(date+"\t"+productCat);
saleValue=Float.parseFloat(valueTokens[4]);
percentVal.set(saleValue);
context.write(moKey,percentVal);
e.printStackTrace();
}
}
}
REDUCER CLASS:
package product;
import java.io.IOException;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;
public class RetailDataAnalysisReducer extends Reducer<Text,FloatWritable,Text,FloatWritable> {
private FloatWritable result=new FloatWritable();
public void reduce(Text key,Iterable<FloatWritable>values,Context context) throws
IOException,InterruptedException
{
float sum=0.0f;
for(FloatWritable val:values) {
sum+=val.get();
}
result.set(sum);
context.write(key,result);
}
}